import cv2
import numpy as np

def canny(img):
    gray = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    canny = cv2.Canny(blur, 50, 150)
    return canny

def region_of_interest(img):
    height = img.shape[0]
    width = img.shape[1]
    mask = np.zeros_like(img)

    polygons = np.array([[(0, height), (1100, height), (100, 250)]])
    polygons2 = np.array([[(width, 0), (width, 1100), (width, height)]])

    cv2.fillPoly(mask, polygons, 255)
    cv2.fillPoly(mask, polygons2, 255)
    masked_image = cv2.bitwise_and(img, mask)
    return masked_image

def display_lines(img,lines):
    line_image = np.zeros_like(img)
    if lines is not None:
        for line in lines:
                for x1, y1, x2, y2 in line:
                    cv2.line(line_image,(x1,y1),(x2,y2),(255,0,0),10)
    return line_image

def make_points(img, line_parameters):
    slope, intercept = line_parameters
    y1 = int(img.shape[0])
    y2 = int(y1*2/3)
    x1 = int((y1 - intercept)/slope)
    x2 = int((y2 - intercept)/slope)
    return np.array([x1, y1, x2, y2])

def average_slope_intercept(img, lines):
    left_fit    = []
    right_fit   = []
    if lines is None:
        return None
    for line in lines:
        for x1, y1, x2, y2 in line:
            fit = np.polyfit((x1,x2), (y1,y2), 1)
            slope = fit[0]
            intercept = fit[1]
            if slope < 0: # y is reversed in image
                left_fit.append((slope, intercept))
            else:
                right_fit.append((slope, intercept))
    left_fit_average  = np.average(left_fit, axis=0)
    right_fit_average = np.average(right_fit, axis=0)
    #print("Left fit", left_fit_average)
    #print("Right fit", right_fit_average)
    left_line  = make_points(img, left_fit_average)
    right_line = make_points(img, right_fit_average)
    averaged_lines = [[left_line, right_line]]
    return averaged_lines

cap = cv2.VideoCapture("MBS4544_pics/test2.mp4")
while(cap.isOpened()):
    _, frame = cap.read()
    image_canny = canny(frame)
    cropped_canny = region_of_interest(image_canny)
    lines = cv2.HoughLinesP(cropped_canny, 2, np.pi/180, 100, np.array([]),
                            minLineLength=40, maxLineGap=5)
    line_image = display_lines(frame, lines)
    averaged_lines = average_slope_intercept(frame, lines)
    avg_line_image = display_lines(frame, averaged_lines)
    combined_image = cv2.addWeighted(frame, 0.8, avg_line_image, 1, 0)
    cv2.imshow("Line Image", line_image)
    cv2.imshow("Average Line Image", avg_line_image)
    cv2.imshow("result", combined_image)
    if cv2.waitKey(1) & 0xff == 27:
        break

cv2.destroyAllWindows()
